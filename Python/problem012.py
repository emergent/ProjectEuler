#! /usr/bin/env python3
'''
Problem 12 - Project Euler

The sequence of triangle numbers is generated by adding the natural numbers. So the 7<sup>th</sup> triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

<blockquote style="font-family:'courier new';">
<b> 1</b>: 1<br><b> 3</b>: 1,3<br><b> 6</b>: 1,2,3,6<br><b>10</b>: 1,2,5,10<br><b>15</b>: 1,3,5,15<br><b>21</b>: 1,3,7,21<br><b>28</b>: 1,2,4,7,14,28</blockquote>
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

http://projecteuler.net/index.php?section=problems&id=012
'''
import math

def getTriangleNumber(i):
    return int(((i+1)*(i+2))/2)

def getDivisors(x):
    dv = []
    for i in range(1, int(math.sqrt(x))):
        if x % i == 0:
            dv.append(i)
            dv.append(x // i)
    return dv

if __name__ == '__main__':
    i = 0
    while True:
        tn = getTriangleNumber(i)
        dv = getDivisors(tn)
        if (len(dv) > 500):
            print(tn, len(dv))
            break
        print(tn, len(dv))
        i += 1
        
